version: "3.9"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: ${BACKEND_IMAGE:-registry.gitlab.com/givemebug/dota2/backend:latest}
    container_name: spec-extractor-backend
    restart: always
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: ${BACKEND_PORT:-8000}
      LETSENCRYPT_HOST: ${BACKEND_LETSENCRYPT_HOST}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
      VIRTUAL_HOST: ${BACKEND_LETSENCRYPT_HOST}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_DATABASE: ${DB_DATABASE:-json_preview_db}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - webproxy
      - internal

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: ${FRONTEND_IMAGE:-registry.gitlab.com/givemebug/dota2/frontend:latest}
    container_name: spec-extractor-frontend
    restart: always
    env_file:
      - .env
    environment:
      NODE_ENV: production
      LETSENCRYPT_HOST: ${FRONTEND_LETSENCRYPT_HOST}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
      VIRTUAL_HOST: ${FRONTEND_LETSENCRYPT_HOST}
      BACKEND_URL: http://backend:8000
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_started
    networks:
      - webproxy
      - internal

  postgres:
    image: postgres:15-alpine
    container_name: spec-extractor-db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_DATABASE:-json_preview_db}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_schema.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - internal

volumes:
  postgres_data:

networks:
  webproxy:
    external: true
  internal:
    driver: bridge
